name: CI
on:
  push:
    paths:
      - "*.pro"
      - "package/**"
      - "src/**"
      - ".github/workflows/ci.yml"
  pull_request:
    paths:
      - "*.pro"
      - "package/**"
      - "src/**"
      - ".github/workflows/ci.yml"
jobs:
  create-release:
    if: ${{ !startsWith(github.event.ref, 'refs/tags/') }}
    name: Create Pre-Release
    runs-on: ubuntu-latest
    needs:
      - build-on-win-mingw
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive
      - name: Set Env
        shell: bash
        run: |
          export VERSION=$(grep -o '".*"' src/version.h | sed 's/"//g')-build.$GITHUB_RUN_NUMBER
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: etc/usr/artifacts/
      - name: Process artifacts
        run: |
          mkdir -p /home/runner/work/modmanager/modmanager/etc/usr/publish
          cd /home/runner/work/modmanager/modmanager/etc/usr/artifacts/ModManager-packed
          zip -q -r ModManager-${{ env.VERSION }}-packed.zip *
          cd /home/runner/work/modmanager/modmanager/etc/usr/artifacts/ModManager-x64-packed
          zip -q -r ModManager-${{ env.VERSION }}-x64-packed.zip *
          mv /home/runner/work/modmanager/modmanager/etc/usr/artifacts/ModManager-packed/ModManager-${{ env.VERSION }}-packed.zip /home/runner/work/modmanager/modmanager/etc/usr/publish/ModManager-${{ env.VERSION }}-packed.zip
          mv /home/runner/work/modmanager/modmanager/etc/usr/artifacts/ModManager-x64-packed/ModManager-${{ env.VERSION }}-x64-packed.zip /home/runner/work/modmanager/modmanager/etc/usr/publish/ModManager-${{ env.VERSION }}-x64-packed.zip
          mv /home/runner/work/modmanager/modmanager/etc/usr/artifacts/ModManager-${{ env.VERSION }}-Installer.exe/ModManager-Installer.exe /home/runner/work/modmanager/modmanager/etc/usr/publish/ModManager-${{ env.VERSION }}-Installer.exe
          mv /home/runner/work/modmanager/modmanager/etc/usr/artifacts/ModManager-${{ env.VERSION }}-x64-Installer.exe/ModManager-Installer.exe /home/runner/work/modmanager/modmanager/etc/usr/publish/ModManager-${{ env.VERSION }}-x64-Installer.exe
          mv /home/runner/work/modmanager/modmanager/etc/usr/artifacts/ModManager-${{ env.VERSION }}.dmg/modmanager.dmg /home/runner/work/modmanager/modmanager/etc/usr/publish/ModManager-${{ env.VERSION }}.dmg
          mv /home/runner/work/modmanager/modmanager/etc/usr/artifacts/ModManager-${{ env.VERSION }}-x86_64.AppImage/Mod_Manager-${{ env.VERSION }}-x86_64.AppImage /home/runner/work/modmanager/modmanager/etc/usr/publish/ModManager-${{ env.VERSION }}.AppImage
      - name: Get short commit sha
        id: get_short_sha
        run: |
          short_sha=$(echo ${GITHUB_SHA} | cut -c1-7)
          echo "::set-output name=short_sha::$short_sha"
      - name: Create Github release
        uses: marvinpinto/action-automatic-releases@v1.2.1
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "${{ env.VERSION }}"
          prerelease: true
          title: "Mod Manager Dev ${{ env.VERSION }} (${{ steps.get_short_sha.outputs.short_sha }})"
          files: |
            etc/usr/publish/**
  build-on-win-mingw:
    name: Build On Windows Mingw
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - qt_arch: win64_mingw81
            qt_ver: 5.15.2
            qt_tools: "tools_mingw,8.1.0-1-202004170606,qt.tools.win64_mingw810"
            qt_tools_mingw_install: mingw810_64
            mingw_arch: mingw64
            msys_arch: x86_64
            x64_suffix: -x64
    steps:
      - name: Install Qt
        uses: jurplel/install-qt-action@v2.13.0
        with:
          version: ${{ matrix.qt_ver }}
          arch: ${{ matrix.qt_arch }}
          tools: ${{ matrix.qt_tools }}
          cached: "false"
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive
      - name: Set Env
        shell: bash
        run: |
          export RAW_VERSION=$(grep -o '".*"' src/version.h | sed 's/"//g')
          export VERSION=$RAW_VERSION-build.$GITHUB_RUN_NUMBER
          echo "RAW_VERSION=${RAW_VERSION}" >> $GITHUB_ENV
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
      - name: Modify version number
        if: ${{ !startsWith(github.event.ref, 'refs/tags/') }}
        shell: bash
        run: |
          sed -i "s/$RAW_VERSION/$VERSION/" src/version.h
      - name: Install dependencies
        shell: powershell
        run: |
          C:/msys64/usr/bin/pacman -S mingw-w64-${{ matrix.msys_arch }}-aria2 --noconfirm
          C:/msys64/usr/bin/pacman -S mingw-w64-${{ matrix.msys_arch }}-quazip --noconfirm
      - name: Qt 5 environment configuration
        if: ${{ startsWith( matrix.qt_ver, 5 ) }}
        shell: pwsh
        run: |
          Write-Output "${{ env.Qt5_DIR }}/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          Write-Output "${{ env.Qt5_DIR }}/../../Tools/${{ matrix.qt_tools_mingw_install }}/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - name: where is qmake & where is mingw32-make
        shell: pwsh
        run: |
          Get-Command -Name 'qmake' | Format-List
          Get-Command -Name 'mingw32-make' | Format-List
      - name: mingw-build
        id: build
        shell: cmd
        run: |
          qmake
          mingw32-make.exe qmake_all
          mingw32-make.exe debug
      - name: list msys dll
        shell: pwsh
        run : |
          ls C:/msys64/${{ matrix.mingw_arch }}/bin/
      - name: package
        id: package
        shell: pwsh
        run: |
          mkdir deploy
          mv release/${{github.event.repository.name}}.exe deploy
          cp C:/msys64/${{ matrix.mingw_arch }}/bin/libcrypto-1_1${{ matrix.x64_suffix }}.dll deploy/
          cp C:/msys64/${{ matrix.mingw_arch }}/bin/libssl-1_1${{ matrix.x64_suffix }}.dll deploy/
          cp C:/msys64/${{ matrix.mingw_arch }}/bin/libaria2-0.dll deploy/
          cp C:/msys64/${{ matrix.mingw_arch }}/bin/libquazip5.dll deploy/
          cp C:/msys64/${{ matrix.mingw_arch }}/bin/libiconv-2.dll deploy/
          cp C:/msys64/${{ matrix.mingw_arch }}/bin/liblzma-5.dll deploy/
          cp C:/msys64/${{ matrix.mingw_arch }}/bin/libintl-8.dll deploy/
          cp C:/msys64/${{ matrix.mingw_arch }}/bin/zlib1.dll deploy/
          cp C:/msys64/${{ matrix.mingw_arch }}/bin/libcares-5.dll deploy/
          cp C:/msys64/${{ matrix.mingw_arch }}/bin/libstdc++-6.dll deploy/
          cp C:/msys64/${{ matrix.mingw_arch }}/bin/libsqlite3-0.dll deploy/
          cp C:/msys64/${{ matrix.mingw_arch }}/bin/libssh2-1.dll deploy/
          cp C:/msys64/${{ matrix.mingw_arch }}/bin/libxml2-2.dll deploy/
          windeployqt.exe --no-translations --no-opengl-sw --no-system-d3d-compiler --no-angle --no-quick-import --qmldir "${{ env.Qt5_DIR }}/qml" deploy/${{github.event.repository.name}}.exe
      - name: x64 dependencies
        if: contains(matrix.mingw_arch, 'mingw64')
        run : |
          cp C:/msys64/${{ matrix.mingw_arch }}/bin/libgcc_s_seh-1.dll deploy/
      - name: x32 dependencies
        if: contains(matrix.mingw_arch, 'mingw32')
        run : |
          cp C:/msys64/${{ matrix.mingw_arch }}/bin/libgcc_s_dw2-1.dll deploy/
      - name: Modify NSIS for x64
        if: contains(matrix.mingw_arch, 'mingw64')
        shell: pwsh
        run: |
          (Get-Content package/modmanager.nsi).replace('PROGRAMFILES', 'PROGRAMFILES64') | Set-Content package/modmanager.nsi
      - name: Create installer
        run: |
          makensis package/modmanager.nsi
      - uses: actions/upload-artifact@v2
        with:
          name: ModManager-${{ env.VERSION }}${{ matrix.x64_suffix }}-Installer.exe
          path: ${{github.workspace}}/package/ModManager*-Installer.exe
      - uses: actions/upload-artifact@v2
        with:
          name: ModManager${{ matrix.x64_suffix }}-packed
          path: deploy/*
      - name: Upload Release
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: package/ModManager-Installer.exe
          asset_name: ModManager-${{ env.VERSION }}${{ matrix.x64_suffix }}-Installer.exe
          tag: ${{ github.ref }}
          overwrite: true
